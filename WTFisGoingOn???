#include <iostream>
#include <string>
#include <queue>
#include <utility>
using std::string;
using std::vector;
struct Node {
public:
    Node(string& str, char move, Node* parent_) : position(str), movement(move), parent(parent_) {
    }

    string position; //should have the size of 9
    char movement;  // U/D/R/L/N
    Node* parent;
};

string moveBone(string str, int position, char where){
    std::cout<<"PRINT "<<str<<" "<<position<<" "<<where<<"\n";
    if(where=='L'){
        std::swap(str[position], str[position-1]);
    }
    else if (where =='R'){
        std::swap(str[position], str[position+1]);
    }
    else if (where == 'D'){
        std::swap(str[position], str[position+3]);
    }
    else{
        std::swap(str[position], str[position-3]);
    }
    std::cout<<"ok\n";
    return str;
}

bool EightGame(Node& rootPosition, string &ans, const unsigned int size) {
    int inversionNum = 0;
    for (int first = 0; first < size; ++first) {
        for (int second = first+1; second < size; ++second) {
            if (rootPosition.position[first] > rootPosition.position[second]) {
                ++inversionNum;
            }
        }
    }
    if (inversionNum % 2){
        return false;
    }
    vector<Node> nodeVector;
    nodeVector.push_back(rootPosition);
    int pos =0;
    while(true){ // Он когда-то точно остановится, т.к. чётность к-ва беспорядков совпадает
        Node* currentNode = &nodeVector[pos];
        std::cout<<"POS: "<< currentNode->position<<" "<<&currentNode<<"\n";
        ++pos;
        //std::cout<<currentNode.parent<<"\n";
        if(currentNode->position=="123456780"){
            string reversedAns;
            while(currentNode->parent){
                reversedAns.push_back(currentNode->movement);
                currentNode=currentNode->parent;
            }
            while(!reversedAns.empty()){
                ans.push_back(reversedAns.back());
                reversedAns.pop_back();
            }
            return true;
        }
        int zeroPosition = currentNode->position.find('0');
        std::cout<<"F "<<currentNode->position<<"\n";
        if(zeroPosition%3!=2){
            string newPosition =  moveBone(currentNode->position, zeroPosition, 'R');
            std::cout<<"BEGIN"<<currentNode->position<<"END\n";

            //nodeVector.emplace_back(Node(newPosition, 'R', currentNode));
            Node(newPosition, 'R', currentNode);
            std::cout<<"BEGIN2 "<<currentNode->position<<" END\n";

        }
        std::cout<<"S "<<currentNode->position<<"\n";
        if(zeroPosition%3!=0){
            string newPosition =  moveBone(currentNode->position, zeroPosition, 'L');
            nodeVector.emplace_back(Node(newPosition, 'L', currentNode));
        }
        if(zeroPosition > 2){
            string newPosition =  moveBone(currentNode->position, zeroPosition, 'U');
            nodeVector.emplace_back(Node(newPosition, 'U', currentNode));
        }
        if(zeroPosition <6){
            std::cout<<"aa";
            string newPosition =  moveBone(currentNode->position, zeroPosition, 'D');
            std::cout<<"bb";
            nodeVector.emplace_back(Node(newPosition, 'D', currentNode));
        }




    }

}


int main() {
    const unsigned int size = 9;
    string firstPosition;
    for(int i=0; i<size; ++i){
        char next;
        std::cin>>next;
        firstPosition.push_back(next);
    }
    Node rootNode(firstPosition, 'N', nullptr);
    string answer;
    if(EightGame(rootNode, answer, size)){
        std::cout<< answer.size()<<"\n";
        std::cout<<answer;
    } else{
        std::cout<<-1;
    }



}
